{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","_this","setState","loading","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","Route","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GA2DeE,IAvDD,SAACC,GACX,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC/CL,EAAaM,KAAKL,IAAQM,SAGtBT,EAAMU,aACV,IAAK,QACDT,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACpB,MACJ,IAAK,WACDnB,EAAeN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACpB,MACJ,IAAK,SACDnB,EACIN,EAAAgB,EAAAC,cAAA,UACIG,UAAWb,EAAac,KAAK,KAC7BE,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,SACfpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnC5B,EAAAgB,EAAAC,cAAA,UACIY,IAAKD,EAAOL,MACZA,MAAOK,EAAOL,OACTK,EAAOE,iBAK5B,MACJ,QACIxB,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAG5B,OACIzB,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQuB,OACpB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAQwB,OAAQ3B,EAAM4B,OACvC3B,yBCrDb4B,EAAAC,QAAA,CAAkBJ,MAAA,qBAAAC,MAAA,qBAAAvB,aAAA,4BAAAK,QAAA,6CCAlBoB,EAAAC,QAAA,CAAkBC,gBAAA,+DCAlBF,EAAAC,QAAA,CAAkBE,YAAA,iCAAAN,MAAA,uLC4BHO,EAvBS,SAACjC,GACrB,OACIkC,EAAAvB,EAAAC,cAAA,WACIsB,EAAAvB,EAAAC,cAAA,MAAIG,UAAWZ,IAAQ4B,iBAAvB,0BAGAG,EAAAvB,EAAAC,cAAA,OAAKuB,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCH,EAAAvB,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,YAAavC,EAAMuC,eAE3BL,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CACIC,QAAQ,SACRC,QAAS1C,EAAM2C,mBAFnB,UAKAT,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CACIC,QAAQ,UACRC,QAAS1C,EAAM4C,mBAFnB,wFCRVZ,6MACJa,MAAQ,CACNC,UAAW,CACTC,KAAM,CACJrC,YAAa,QACbO,cAAe,CACb+B,KAAM,OACNC,YAAa,aAEf/B,MAAO,GACPgC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEX8C,OAAQ,CACN3C,YAAa,QACbO,cAAe,CACb+B,KAAM,OACNC,YAAa,UAEf/B,MAAO,GACPgC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEX+C,QAAS,CACP5C,YAAa,QACbO,cAAe,CACb+B,KAAM,OACNC,YAAa,YAEf/B,MAAO,GACPgC,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEbJ,OAAO,EACP7C,SAAS,GAEXkD,QAAS,CACP/C,YAAa,QACbO,cAAe,CACb+B,KAAM,OACNC,YAAa,WAEf/B,MAAO,GACPgC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEXmD,MAAO,CACLhD,YAAa,QACbO,cAAe,CACb+B,KAAM,QACNC,YAAa,cAEf/B,MAAO,GACPgC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP7C,SAAS,GAEXoD,eAAgB,CACdjD,YAAa,SACbO,cAAe,CACbI,QAAS,CACP,CAAEH,MAAO,UAAWO,aAAc,WAClC,CAAEP,MAAO,WAAYO,aAAc,cAGvCP,MAAO,UACPgC,WAAY,GACZE,OAAO,IAGXQ,aAAa,KAGfC,aAAe,SAAAC,GACbA,EAAMC,iBACNC,EAAKC,SAAS,CAAEC,SAAS,IACzB,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBJ,EAAKnB,MAAMC,UAC3CqB,EAASC,GAAyBJ,EAAKnB,MAAMC,UAC3CsB,GACAlD,MAEJ,IAAMmD,EAAQ,CACZ9B,YAAayB,EAAKhE,MAAMsE,KACxBC,MAAOP,EAAKhE,MAAMuE,MAClBC,UAAWL,EACXM,OAAQT,EAAKhE,MAAMyE,QAGrBT,EAAKhE,MAAM0E,cAAcL,EAAOL,EAAKhE,MAAM2E,UAG7CC,oBAAsB,SAACd,EAAOe,GAC5B,IAAMC,EAAqBC,YACzBf,EAAKnB,MAAMC,UAAU+B,GACrB,CACE3D,MAAO4C,EAAMkB,OAAO9D,MACpBkC,MAAO6B,YACLnB,EAAMkB,OAAO9D,MACb8C,EAAKnB,MAAMC,UAAU+B,GAAiB3B,YAExC3C,SAAS,IAGP2E,EAAmBH,YAAaf,EAAKnB,MAAMC,UAAZjC,OAAAsE,EAAA,EAAAtE,CAAA,GAClCgE,EAAkBC,IAGjBlB,GAAc,EAClB,IAAK,IAAIiB,KAAmBK,EAC1BtB,EAAcsB,EAAiBL,GAAiBzB,OAASQ,EAG3DI,EAAKC,SAAS,CAAEnB,UAAWoC,EAAkBtB,YAAaA,6EAGnD,IAAAwB,EAAAC,KACDC,EAAoB,GAC1B,IAAK,IAAI9D,KAAO6D,KAAKxC,MAAMC,UACzBwC,EAAkB9E,KAAK,CACrB+E,GAAI/D,EACJgE,OAAQH,KAAKxC,MAAMC,UAAUtB,KAIjC,IAAIiE,EACFvD,EAAAvB,EAAAC,cAAA,QAAM8E,SAAUL,KAAKxB,cAClByB,EAAkBhE,IAAI,SAAAqE,GAAW,OAChCzD,EAAAvB,EAAAC,cAACc,EAAA,EAAD,CACEF,IAAKmE,EAAYJ,GACjB7E,YAAaiF,EAAYH,OAAO9E,YAChCO,cAAe0E,EAAYH,OAAOvE,cAClCC,MAAOyE,EAAYH,OAAOtE,MAC1Bb,SAAUsF,EAAYH,OAAOpC,MAC7B9C,eAAgBqF,EAAYH,OAAOtC,WACnC3C,QAASoF,EAAYH,OAAOjF,QAC5Ba,QAAS,SAAA0C,GAAK,OAAIsB,EAAKR,oBAAoBd,EAAO6B,EAAYJ,SAGlErD,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,UAAUmD,UAAWP,KAAKxC,MAAMe,aAAhD,UAQJ,OAHIyB,KAAKrF,MAAMkE,UACbuB,EAAOvD,EAAAvB,EAAAC,cAACiF,EAAA,EAAD,OAGP3D,EAAAvB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ6B,aACtBE,EAAAvB,EAAAC,cAAA,mCACC6E,UAnKiBK,aA0LXC,cAjBS,SAAAlD,GACtB,MAAO,CACLyB,KAAMzB,EAAMmD,cAAczD,YAC1BgC,MAAO1B,EAAMmD,cAAcC,WAC3B/B,QAASrB,EAAMwB,MAAMH,QACrBS,MAAO9B,EAAMqD,KAAKvB,MAClBF,OAAQ5B,EAAMqD,KAAKzB,SAII,SAAA0B,GACzB,MAAO,CACLzB,cAAe,SAACF,EAAWG,GAAZ,OACbwB,EAASC,IAAuB5B,EAAWG,OAIlCoB,CAGbM,YAAiBrE,EAAasE,MClM1BC,6MACJC,yBAA2B,WACzBxC,EAAKhE,MAAMyG,QAAQC,YAGrBC,yBAA2B,WACzB3C,EAAKhE,MAAMyG,QAAQG,QAAQ,mGAI3B,IAAIC,EAAU3E,EAAAvB,EAAAC,cAACkG,EAAA,EAAD,CAAUC,GAAG,MAC3B,GAAI1B,KAAKrF,MAAMsE,KAAM,CACnB,IAAM0C,EAAoB3B,KAAKrF,MAAMiH,UACnC/E,EAAAvB,EAAAC,cAACkG,EAAA,EAAD,CAAUC,GAAG,MACX,KACJF,EACE3E,EAAAvB,EAAAC,cAAA,WACGoG,EACD9E,EAAAvB,EAAAC,cAACmB,EAAD,CACEQ,YAAa8C,KAAKrF,MAAMsE,KACxB3B,kBAAmB0C,KAAKmB,yBACxB5D,kBAAmByC,KAAKsB,2BAE1BzE,EAAAvB,EAAAC,cAACsG,EAAA,EAAD,CACEC,KAAM9B,KAAKrF,MAAMoH,MAAMD,KAAO,gBAC9BE,UAAWrF,KAKnB,OAAO6E,SA9BYf,aAyCRC,sBAPS,SAAAlD,GACtB,MAAO,CACLyB,KAAMzB,EAAMmD,cAAczD,YAC1B0E,UAAWpE,EAAMwB,MAAM4C,YAIZlB,CAAyBQ","file":"static/js/3.ef6d5522.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option \n                            key={option.value} \n                            value={option.value}>\n                                {option.displayValue}\n                        </option>\n                    ))}\n                </select> \n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__r54YH\",\"Label\":\"Input_Label__3P5iu\",\"InputElement\":\"Input_InputElement__19up3\",\"Invalid\":\"Input_Invalid__2zoGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1yU2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2xRIk\",\"Input\":\"ContactData_Input__15U2A\"};","import React from 'react';\n\nimport classes from './CheckoutSummary.module.css';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div>\n            <h1 className={classes.CheckoutSummary}>\n                Happy with your order?\n            </h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n                <Button \n                    btnType=\"Danger\"\n                    clicked={props.checkoutCancelled}>\n                        Cancel\n                </Button>\n                <Button \n                    btnType=\"Success\"\n                    clicked={props.checkoutContinued}>\n                        Continue\n                </Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from \"react\"\nimport axios from \"../../../axios-orders\"\nimport { connect } from \"react-redux\"\n\nimport classes from \"./ContactData.module.css\"\nimport Button from \"../../../components/UI/Button/Button\"\nimport Spinner from \"../../../components/UI/Spinner/Spinner\"\nimport Input from \"../../../components/UI/Input/Input\"\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\"\nimport * as actions from \"../../../store/actions/index\"\nimport { updateObject, checkValidity } from \"../../../shared/utility\"\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Zip Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\n          ],\n        },\n        value: \"fastest\",\n        validation: {},\n        valid: true,\n      },\n    },\n    formIsValid: false,\n  }\n\n  orderHandler = event => {\n    event.preventDefault()\n    this.setState({ loading: true })\n    const formData = {}\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    }\n\n    this.props.onOrderBurger(order, this.props.token)\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true,\n      }\n    )\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    })\n\n    let formIsValid = true\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\n  }\n\n  render() {\n    const formElementsArray = []\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    )\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter Contact Details</h4>\n        {form}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token)),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios))\n","import React, { Component } from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\"\nimport ContactData from \"./ContactData/ContactData\"\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack()\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\")\n  }\n\n  render() {\n    let summary = <Redirect to=\"/\" />\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      )\n    }\n    return summary\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  }\n}\n\nexport default connect(mapStateToProps)(Checkout)\n"],"sourceRoot":""}