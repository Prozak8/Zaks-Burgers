{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_WTFwerewolf_Projects_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_10__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.38f76b52.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType) {\n        case('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option \n                            key={option.value} \n                            value={option.value}>\n                                {option.displayValue}\n                        </option>\n                    ))}\n                </select> \n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed}/>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__r54YH\",\"Label\":\"Input_Label__3P5iu\",\"InputElement\":\"Input_InputElement__19up3\",\"Invalid\":\"Input_Invalid__2zoGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__LqS5W\",\"Input\":\"Auth_Input__3dKvY\"};","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\nimport Button from \"../../components/UI/Button/Button\"\nimport Input from \"../../components/UI/Input/Input\"\nimport Spinner from \"../../components/UI/Spinner/Spinner\"\nimport classes from \"./Auth.module.css\"\nimport * as actions from \"../../store/actions/index\"\nimport { updateObject, checkValidity } from \"../../shared/utility\"\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"John@smith.com\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"********\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: true,\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath()\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    })\n    this.setState({ controls: updatedControls })\n  }\n\n  submitHandler = event => {\n    event.preventDefault()\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    )\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup }\n    })\n  }\n\n  render() {\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      })\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ))\n\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n\n    let errorMessage = null\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>\n    }\n\n    let authRedirect = null\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token != null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth)\n"],"sourceRoot":""}